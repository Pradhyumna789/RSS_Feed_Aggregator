// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, user_name)
VALUES(
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, user_name
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
TRUNCATE TABLE users
`

func (q *Queries) DeleteUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUser)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_name FROM users WHERE user_name = $1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUser, userName)
	var user_name string
	err := row.Scan(&user_name)
	return user_name, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id FROM users WHERE user_name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, userName string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, userName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, updated_at, user_name FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
